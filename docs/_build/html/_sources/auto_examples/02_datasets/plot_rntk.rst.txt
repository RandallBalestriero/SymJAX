.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_datasets_plot_rntk.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_02_datasets_plot_rntk.py:


RNTK kernel
===========

tiem series regression and classification




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Op(name=unnamed_36, shape=(3, 3), dtype=float32, scope=/)
    [array([[560.7372 , 116.68406, 114.43712],
           [116.68406, 460.00244, 199.66608],
           [114.43712, 199.66608, 377.672  ]], dtype=float32), array([[94.008156, 61.892555, 52.221836],
           [61.892555, 94.7868  , 67.029205],
           [52.221836, 67.029205, 63.47615 ]], dtype=float32)]






|


.. code-block:: default

    import numpy as np
    import symjax
    import symjax.tensor as T


    def RNTK_first_time_step(x, param):
        # this is for computing the first GP and RNTK for t = 1. Both for relu and erf
        sw = param['sigmaw']
        su = param['sigmau']
        sb = param['sigmab']
        sh = param['sigmah']
        X = x * x[:, None]
        print(X)
        n = X.shape[0]
        GP_new = sh ** 2 * sw ** 2 * T.eye(n, n) + (su ** 2 / m) * X + sb ** 2
        RNTK_new = GP_new
        return RNTK_new, GP_new


    def RNTK_relu(x, RNTK_old, GP_old, param, output):
        sw = param['sigmaw']
        su = param['sigmau']
        sb = param['sigmab']
        sv = param['sigmav']

        a = T.diag(GP_old)  # GP_old is in R^{n*n} having the output gp kernel
        # of all pairs of data in the data set
        B = a * a[:, None]
        C = T.sqrt(B)  # in R^{n*n}
        D = GP_old / C  # this is lamblda in ReLU analyrucal formula
        # clipping E between -1 and 1 for numerical stability.
        E = T.clip(D, -1, 1)
        F = (1 / (2 * np.pi)) * (E * (np.pi - T.arccos(E)) + T.sqrt(1 - E ** 2)) * C
        G = (np.pi - T.arccos(E)) / (2 * np.pi)
        if output:
            GP_new = sv ** 2 * F
            RNTK_new = sv ** 2. * RNTK_old * G + GP_new
        else:
            X = x * x[:, None]
            GP_new = sw ** 2 * F + (su ** 2 / m) * X + sb ** 2
            RNTK_new = sw ** 2. * RNTK_old * G + GP_new
        return RNTK_new, GP_new


    L = 10
    N = 3
    DATA = T.Placeholder((N, L), 'float32')
    # parameters
    param = {}
    param['sigmaw'] = 1.33
    param['sigmau'] = 1.45
    param['sigmab'] = 1.2
    param['sigmah'] = 0.4
    param['sigmav'] = 2.34
    m = 1

    # first time step
    RNTK, GP = RNTK_first_time_step(DATA[:, 0], param)

    for t in range(1, L):
        RNTK, GP = RNTK_relu(DATA[:, t], RNTK, GP, param, False)

    RNTK, GP = RNTK_relu(0, RNTK, GP, param, True)


    f = symjax.function(DATA, outputs=[RNTK, GP])


    # three data of length T
    a = np.random.randn(L)
    b = np.random.randn(L)
    c = np.random.randn(L)
    example = np.stack([a, b, c])  # it is of shape (3, T)
    print(f(example))


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.008 seconds)


.. _sphx_glr_download_auto_examples_02_datasets_plot_rntk.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_rntk.py <plot_rntk.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_rntk.ipynb <plot_rntk.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
